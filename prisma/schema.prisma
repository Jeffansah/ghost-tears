generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  username  String   @unique
  wins      Int      @default(0)
  losses    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gamesAsPlayer1 Game[] @relation("Player1")
  gamesAsPlayer2 Game[] @relation("Player2")
  gamesWon Game[] @relation("Winner")
  headToHeadAsPlayer1 HeadToHead[] @relation("Player1")
  headToHeadAsPlayer2 HeadToHead[] @relation("Player2")
  moves     Move[]

  @@index([clerkId])
  @@index([username])
}

model Game {
  id        String   @id @default(cuid())
  status    GameStatus
  currentWord String
  currentTurn String  // player1Id or player2Id
  player1Id  String
  player2Id  String?  // Made optional
  player1    User     @relation("Player1", fields: [player1Id], references: [id])
  player2    User?    @relation("Player2", fields: [player2Id], references: [id])
  player1GhostTears String[] // Array of collected letters
  player2GhostTears String[] // Array of collected letters
  winnerId   String?
  winner     User?    @relation("Winner", fields: [winnerId], references: [id])
  moves      Move[]
  wordListCategory String @default("pokemon") // Specify which word list to use
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([status])
  @@index([player1Id, player2Id])
  @@index([currentTurn])
  @@index([wordListCategory])
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  playerId  String
  player    User     @relation(fields: [playerId], references: [id])
  letter    String
  word      String   // The word after this move
  isChallenge Boolean @default(false)
  challengeResult Boolean? // null if not a challenge, true if valid, false if invalid
  createdAt DateTime @default(now())

  @@index([gameId])
  @@index([playerId])
  @@index([createdAt])
}

model HeadToHead {
  id        String   @id @default(cuid())
  player1Id String
  player2Id String
  player1   User     @relation("Player1", fields: [player1Id], references: [id])
  player2   User     @relation("Player2", fields: [player2Id], references: [id])
  player1Wins Int    @default(0)
  player2Wins Int    @default(0)
  lastPlayed DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([player1Id, player2Id])
  @@index([lastPlayed])
}

model WordCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  description String?
  words     String[] // Array of words in this category
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

enum GameStatus {
  WAITING
  PLAYING
  CHALLENGED
  ENDED
}